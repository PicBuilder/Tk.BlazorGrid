
@if (gridBase.CurrentPage <= gridBase.MaxPage)
{
    <nav aria-label="Page navigation">
        <ul class="pagination">
            @if (PagerHelpers.ShowLeftPagerButton(gridBase.MaxPages, gridBase.PagerTotalCount, gridBase.CurrentPage))
            {
                <li class="page-item"><button type="button" class="page-link" @onclick="@(async () => await GetPagedData(gridBase.MinPage-1))">Previous</button></li>
            }

            @for (var i = gridBase.MinPage; i <= gridBase.MaxPage; i++)
            {
                var tempint = i;
                if (PagerHelpers.IsActivePage(gridBase.CurrentPage, i))
                {
                    <li class="page-item active"><button type="button" class="page-link" @onclick="@(async () => await GetPagedData(tempint))">@i</button></li>
                }
                else
                {
                    <li class="page-item"><button type="button" class="page-link" @onclick="@(async () => await GetPagedData(tempint))">@i</button></li>
                }
            }

            @if (PagerHelpers.ShowRightPagerButton(gridBase.MaxPages, gridBase.PagerTotalCount, gridBase.CurrentPage))
            {
                <li class="page-item"><button type="button" class="page-link" @onclick="@(async () => await GetPagedData(gridBase.MaxPage+1))">Next</button></li>
            }
        </ul>
    </nav>
}

<div class="small">
    @gridBase.TotalCount result(s) found
</div>

@code {
    [Parameter]
    public GridBase gridBase { get; set; }

    [Parameter]
    public EventCallback<GridBase> OnPageClick { get; set; }

    protected async Task GetPagedData(int clickedPage = 1)
    {        
        gridBase.CurrentPage = clickedPage;
        await OnPageClick.InvokeAsync(gridBase);
    }
}
