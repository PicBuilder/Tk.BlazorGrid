<div>
    @foreach (var item in MultiSelectItems.Data)
    {
        if (item.IsSelected)
        {
            <div class="btn-group">
                <button type="button" class="btn btn-light btn-sm">@item.Text</button>
                <button type="button"
                        class="btn btn-light text-danger btn-sm"
                        @onclick="@(async () => await ProcessMultiSelectItem(ItemAction.Remove, @item.Id))" >
                    &times;
                </button>
            </div>
        }
    }
</div>

<div class="mt-2">
    <select @bind="Selected" class="form-control">
        <option value="0"></option>
        @foreach (var item in MultiSelectItems.Data)
        {
            if (!item.IsSelected)
            {
                <option value="@item.Id">@item.Text</option>
            }
        }
    </select>
    @*<div>selected value: @Captured</div>*@
</div>

@code {

    protected enum ItemAction
    {
        Add = 1,
        Remove
    }

    //string Captured;

    int _Selected;

    [Parameter]
    public MultiSelectItems MultiSelectItems { get; set; }

    [Parameter]
    public EventCallback<MultiSelectItems> OnItemClick { get; set; }

    private int Selected
    {
        get { return _Selected; }
        set
        {
            ProcessMultiSelectItem(ItemAction.Add, value.ToString());
            _Selected = 0;   //reset the drop down
        }
    }

    protected async Task ProcessMultiSelectItem(ItemAction itemAction, string Id)
    {
        var item = MultiSelectItems.Data.SingleOrDefault(x => x.Id == Id);

        switch (itemAction)
        {
            case ItemAction.Add:
                item.IsSelected = true;
                break;
            case ItemAction.Remove:
                item.IsSelected = false;
                break;
            default:
                break;
        }

        //Captured = item.Text;
        await OnItemClick.InvokeAsync(MultiSelectItems);
    }

}
