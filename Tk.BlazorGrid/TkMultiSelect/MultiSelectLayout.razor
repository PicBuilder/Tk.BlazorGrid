<div>
    @foreach (var item in MultiSelectItemsSelected.Data)
    {
        <div class="btn-group">
            <button type="button" class="btn btn-light btn-sm">@item.Text</button>
            <button type="button"
                    class="btn btn-light text-danger btn-sm"
                    @onclick="@(async () => await removeItem(@item.Id))">
                &times;
            </button>
        </div>
    }
</div>

<div class="mt-2">
    <div class="form-group">
        <select id="multiListItems" @onchange="addItem" class="form-control">
            <option selected value="-1"></option>
            @foreach (var item in MultiSelectItemsDisplay.Data)
            {
                <option value="@item.Id">@item.Text</option>
            }
        </select>
        @if (isSelected)
        {
            <label class="text-danger">Item has already been selected!</label>
        }
    </div>
</div>


@code{

    protected enum ItemAction
    {
        Add=1,
        Remove
    }

    public bool isSelected { get; set; } = false;

    public string selectedItemId { get; set; }

    public MultiSelectItem tempItem { get; set; }

    public MultiSelectItems MultiSelectItemsDisplay { get; set; }

    [Parameter]
    public MultiSelectItems MultiSelectItems { get; set; }

    [Parameter]
    public MultiSelectItemsSelected MultiSelectItemsSelected { get; set; }

    [Parameter]
    public EventCallback<MultiSelectItemsSelected> OnItemClick { get; set; }

    protected override void OnInitialized()
    {
        if (MultiSelectItems != null)
        {
            ProcessMultiSelectDisplay();
        }
    }

    protected void ProcessMultiSelectDisplay()
    {
        MultiSelectItem itemRecord;

        if (MultiSelectItemsSelected != null)
        {
            MultiSelectItemsDisplay = MultiSelectItems;

            foreach (var selectedItem in MultiSelectItemsSelected.Data)
            {
                itemRecord = MultiSelectItemsDisplay.Data.Where(x => x.Id == selectedItem.Id).FirstOrDefault();
                MultiSelectItemsDisplay.Data.Remove(itemRecord);
            }
        }
        else
        {
            MultiSelectItemsDisplay = MultiSelectItems;
        }
        MultiSelectItemsDisplay.Data.OrderBy(x => x.Text);
    }

    protected void ProcessMultiSelectItem(ItemAction itemAction, string itemId){
        MultiSelectItem itemRecord;

        switch (itemAction)
        {
            case ItemAction.Add:
                itemRecord = MultiSelectItems.Data.Where(x => x.Id == itemId).FirstOrDefault();
                if (itemRecord != null)
                {
                    isSelected = MultiSelectItemsSelected.Data.Any(x => x.Id == itemRecord.Id);
                    if (!isSelected)
                    {
                        MultiSelectItemsSelected.Data.Add(itemRecord);
                        //handle display
                        MultiSelectItemsDisplay.Data.Remove(itemRecord);
                    }
                }
                break;
            case ItemAction.Remove:
                if (MultiSelectItemsSelected != null)
                {
                    itemRecord = MultiSelectItemsSelected.Data.Where(x => x.Id == itemId).FirstOrDefault();

                    if (itemRecord != null)
                    {
                        MultiSelectItemsSelected.Data.Remove(itemRecord);
                        //handle display
                        MultiSelectItemsDisplay.Data.Add(itemRecord);
                    }
                }
                break;
            default:
                break;
        }

        MultiSelectItemsDisplay.Data.OrderBy(x => x.Text);
    }

    protected async Task removeItem(string Id)
    {
        ProcessMultiSelectItem(ItemAction.Remove, Id);
        await OnItemClick.InvokeAsync(MultiSelectItemsSelected);
    }

    protected async Task addItem(ChangeEventArgs e)
    {
        ProcessMultiSelectItem(ItemAction.Add, e.Value.ToString());
        await OnItemClick.InvokeAsync(MultiSelectItemsSelected);
    }
}
